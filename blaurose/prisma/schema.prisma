// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Company {
  company_id    String  @default(cuid()) @id
  company_code  String  @db.Char(4) @unique
  company_name  String
  shops Shop[]   // for One-To-Many

  stamp_delete  Boolean @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz(3)
  updated_at   DateTime? @updatedAt     @db.Timestamptz(3)

  @@map("m_companies")
}

model Shop {
  shop_id    String  @default(cuid()) @unique
  shop_code  String  @db.Char(4)      @unique
  shop_name  String
  stamp_hq   Boolean @default(false)
  employees Employee[]    // for One-To-Many

  company Company @relation(fields: [company_id], references: [company_id])
  company_id String

  stamp_delete  Boolean @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz(3)
  updated_at   DateTime? @updatedAt @db.Timestamptz(3)

  @@map("m_shops")
  @@id([company_id, shop_code])
  @@index([shop_code])
}

model Employee {
  employee_id    String  @default(cuid()) @unique
  employee_code  String  @db.Char(4)      @unique
  employee_name  String
  company_joined_at DateTime?             @db.Date
  hourly_wage_amountã€€Int?

  shop Shop @relation(fields: [shop_id], references: [shop_id])
  shop_id String
  user User?
  timecard Timecard[]    // for One-To-Many

  stamp_delete  Boolean @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz(3)
  updated_at   DateTime? @updatedAt @db.Timestamptz(3)

  @@map("m_employees")
  @@id([shop_id, employee_code])
  @@index([employee_code])
}

model User {
  user_id   String  @default(cuid()) @id
  login_id  String  @unique
  password  String

  employee  Employee  @relation(fields: [employee_id], references: [employee_id])  
  employee_id String  @unique

  stamp_delete  Boolean @default(false)
  created_at   DateTime @default(now()) @db.Timestamptz(3)
  updated_at    DateTime? @updatedAt    @db.Timestamptz(3)

  @@map("m_users")
  @@index([login_id, password])
}

model Timecard {
  timecard_id   String             @id @default(cuid())
  stamped_on    Int
  work_start_at DateTime?          @db.Timestamptz(3)
  work_end_at   DateTime?          @db.Timestamptz(3)
  rest_start_at DateTime?          @db.Timestamptz(3)
  rest_end_at DateTime?            @db.Timestamptz(3)

  rest_minutes_time Int?
  actual_working_minutes_time Int?
  overtime Int?
  late_night_work_time Int?
  holiday_work_time Int?
  stamp_approval  Boolean          @default(false)

  employee  Employee  @relation(fields: [employee_id], references: [employee_id])  
  employee_id String

  stamp_delete  Boolean @default(false)
  created_at    DateTime @default(now()) @db.Timestamptz(3)
  updated_at    DateTime? @updatedAt    @db.Timestamptz(3)

  @@map("t_timecard")
  @@unique(fields: [stamped_on, employee_id], name: "u_timecard_stamped_on_employee_id")
  @@index([stamped_on])
  
}